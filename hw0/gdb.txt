GDB Practice:

a. cgdb map

b. b 15 (sets breakpoint at line )

c. run

d. 

  * argv is an array of strings. In this case the length of argv is 1 since argc = 1. 

	If one executes:

	p argv
	$1 = (char **) 0x7fffffffe4d8

	0x7fffffffe4d8 is the memory address which points to the first string "map".

e.

  * If one executes:

	p *argv
	$3 = 0x7fffffffe711 "/home/vagrant/code/personal/hw0/map"

	we find that "/home/vagrant/code/personal/hw0/map" is at the address of argv. 

f. Use the command next to step until recur.  

g. 

  * We can get the address of the function recur by doing 

  p recur
  $2 = {int (int)} 0x5555555546cd <recur>

  The address of recur is at 0x5555555546cd. 

h. Run "step"

i. Reached the if statement.

j. layout asm in gdb debugger to go into assembly code

k. Repeatedly call ni to skip to next callq instruction. 

l. What values are in all the registers?

    * Typing in info registers gives the contents of all the registers.

(gdb) info registers
rax            0x2      2
rbx            0x0      0
rcx            0x0      0
rdx            0x0      0
rsi            0x555555756340   93824994337600
rdi            0x2      2
rbp            0x7fffffffe3b0   0x7fffffffe3b0
rsp            0x7fffffffe390   0x7fffffffe390
r8             0x0      0
r9             0x0      0
r10            0x555555756010   93824994336784
r11            0x246    582
r12            0x555555554580   93824992232832
r13            0x7fffffffe4d0   140737488348368
r14            0x0      0
r15            0x0      0
rip            0x555555554702   0x555555554702 <recur+53>
eflags         0x202    [ IF ]
cs             0x33     51
ss             0x2b     43
ds             0x0      0
es             0x0      0
fs             0x0      0
gs             0x0      0


m. Use the command ni to step into the call instruction

n. Go back to c using layout prev

o. We can get the call stack by calling backtrace in gdb. 

(gdb) backtrace
#0  recur (i=21845) at recurse.c:3
#1  0x0000555555554707 in recur (i=3) at recurse.c:9
#2  0x00005555555546c6 in main (argc=1, argv=0x7fffffffe4d8) at map.c:23

p. break recur if i == 0

// break x:20 if strcmp(y, "hello") == 0

q. continue

r. We can print out the call stack by calling backtrace

(gdb) backtrace
#0  recur (i=0) at recurse.c:5
#1  0x0000555555554707 in recur (i=1) at recurse.c:9
#2  0x0000555555554707 in recur (i=2) at recurse.c:9
#3  0x0000555555554707 in recur (i=3) at recurse.c:9
#4  0x00005555555546c6 in main (argc=1, argv=0x7fffffffe4d8) at map.c:23

s. 

t.

u. layout asm

v.

    *

w. layout prev

x.

y. run

z. quit
